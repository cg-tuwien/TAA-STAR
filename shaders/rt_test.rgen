#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "shader_cpu_common.h"
#include "shader_common_main.glsl"

layout(push_constant) PUSHCONSTANTSDEF_RAYTRACING pushConstants;

layout (std430, set = 0, binding = 7) readonly buffer PixelOffsetBuffer { vec2 pixel_offset[]; };
layout(set = 2, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 0, SHADER_FORMAT_RAYTRACE) uniform image2D image;
layout(set = 3, binding = 0, TAA_SHADER_OUTPUT_FORMAT)  uniform image2D  taaInput;
layout(set = 3, binding = 1, TAA_SHADER_FORMAT_SEGMASK) uniform uimage2D taaSegMask;

layout(location = 0) rayPayloadEXT vec3 hitValue; // payload to traceRayEXT

float rand(vec2 n) { 
	return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
}

vec2 pixelOffset(int currentSample, int numSamples) {
    //return vec2(rand(gl_LaunchIDEXT.xy), rand(gl_LaunchIDEXT.xy * 2));

    //vec2 offsets[] = { {0.5, 0.5}, {0.25, 0.25}, {0.75, 0.25}, {0.75, 0.75}, {0.25, 0.75} };
    //return offsets[currentSample % 5];

    if (numSamples == 1) {
        return vec2(0.5);
    } else {
        return vec2(0.5) + pixel_offset[currentSample];
    }
}

void main() 
{
    // clear target pixel
    //imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(0.0, 0.0, 0.0, 0.0));

    // TODO: better sampling pattern

    if (pushConstants.mAugmentTAA) {
        //imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(1,0,1,1));
        uint segMask = imageLoad(taaSegMask, ivec2(gl_LaunchIDEXT.xy)).r & 3;
        if (segMask != 2) {
            imageStore(image, ivec2(gl_LaunchIDEXT.xy), imageLoad(taaInput, ivec2(gl_LaunchIDEXT.xy)));
            return;
        }
    }

    int numSamples = clamp(pushConstants.mNumSamples, 1, RAYTRACING_MAX_SAMPLES_PER_PIXEL);
    vec3 accumulated = vec3(0);

    float aspectRatio = float(gl_LaunchSizeEXT.x) / float(gl_LaunchSizeEXT.y);

    for (int iSample = 0; iSample < numSamples; ++iSample) {
	
        //const vec2 pixelCenter =      vec2(gl_LaunchIDEXT.xy  ) + vec2(0.5);
        const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + pixelOffset(iSample, numSamples);
        const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);

        // We are constructing the view rays in WORLD SPACE. 
        // This means: 
        //  ->  Forward is the camera's -Z direction
        //  ->  +Y axis is pointing up 
        //  ->  +X is pointing to the right
        vec2 d = inUV * 2.0 - 1.0;

        vec3 origin = vec3(0.0, 0.0, 0.0);
        //                                                 Up == +Y in World, but UV-coordinates have +Y pointing down
        //                                                   |    Forward == -Z n World Space
        //                                                   |      |
        //                                                   v      v 
        vec3 direction = normalize(vec3(d.x * aspectRatio, -d.y, -sqrt(3))); // 1 => sqrt(3) is the scaling factor from a fov of 90 to 60
	    vec4 p1 = vec4(origin, 1.0);
	    vec4 p2 = vec4(origin + direction, 1.0);
	    vec4 vp1 = pushConstants.mCameraTransform * p1;
	    vec4 vp2 = pushConstants.mCameraTransform * p2;
	    origin = vec3(vp1);
	    direction = vec3(normalize(vp2 - vp1));
	
        uint rayFlags = gl_RayFlagsCullBackFacingTrianglesEXT;  // note: two-sided materials have culling disabled in their geometry instance
        //uint rayFlags = gl_RayFlagsNoneEXT;
        uint cullMask = 0xff;
        float tmin = 0.001;
        float tmax = pushConstants.mMaxRayLength; // 100.0;
        traceRayEXT(topLevelAS, rayFlags, cullMask, 0 /*sbtRecordOffset*/, 0 /*sbtRecordStride*/, 0 /*missIndex*/, origin, tmin, direction, tmax, 0 /*payload*/);

        accumulated += hitValue;
    }

    imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(accumulated / float(numSamples), 0.0));
}
